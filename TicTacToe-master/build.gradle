/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'Toggi' at '10/29/15 10:12 PM' with Gradle 2.7
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.7/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'application'
apply plugin: 'pmd'
apply plugin: 'markdown'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

sourceSets {
    selenium
    seleniumXvfb
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'com.sparkjava:spark-core:2.3'

    testCompile 'junit:junit:4.12'

    seleniumCompile 'junit:junit:4.12'
    seleniumCompile 'org.seleniumhq.selenium:selenium-java:2.48.2'

    seleniumXvfbCompile 'junit:junit:4.12'
    seleniumXvfbCompile 'org.seleniumhq.selenium:selenium-java:2.48.2'
}

task selenium(type: Test, dependsOn: installDist) {
    testClassesDir = sourceSets.selenium.output.classesDir
    classpath = sourceSets.selenium.runtimeClasspath
}

task seleniumXvfb(type: Test, dependsOn: installDist) {
    testClassesDir = sourceSets.selenium.output.classesDir
    classpath = sourceSets.selenium.runtimeClasspath

    environment "DISPLAY", ":99"

    doFirst {
        'bin/xvfb start'.execute()
        'build/install/TicTacToe/bin/TicTacToe &'.execute()
    }

    doLast {
        'sh -e /etc/init.d/xvfb stop'.execute()
    }
}

//BEGIN JACOCO SETUP
mainClassName = "is.ru.tictactoe.TicTacToe"

jar {
    manifest {
        attributes "Main-Class": "is.ru.tictactoe.TicTacToe"
    }
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}

task stage { dependsOn clean, installDist }

jacoco {
    applyTo run
}

task applicationCodeCoverageReport(type:JacocoReport){
    executionData run
    sourceSets sourceSets.main
}

jacoco {
    toolVersion = "0.7.1.201405082137"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

test {
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
}
//END JACOCO SETUP

//BEGIN PMD SETUP

pmd {
    ruleSets = [
            "java-basic",
            "java-braces"
            ]
}

//END PMD SETUP

//Convert markdown (.md) files to html:
buildscript {
    repositories {
        jcenter()
        maven { url 'http://dl.bintray.com/content/aalmiray/kordamp' }
    }
    dependencies {
        classpath 'org.kordamp:markdown-gradle-plugin:1.0.0'
    }
}
apply plugin: 'org.kordamp.markdown.convert'

markdownToHtml.sourceDir = file("docs/markdown")
markdownToHtml.outputDir = file("docs/html")




